container Modelparameters : using = "units"
{   
	//Generieke instellingen
	parameter<string>   AnalyseMoment                := 'Y2018',                                                                                                                   Descr = "use this to select a row in Advanced/AnalyseMomentPresets";
	parameter<string>   Orgset                       := 'PC4_all',                                                                                                                     Descr = "Which origin point set need to be used? Examples: 'PC4' 'PC6' 'Buurt' 'Gemeente'";
	parameter<string>   Destset                      := 'PC4_all',                                                                                                                     Descr = "Which destination point set needs to be used? Examples: PC4";
	parameter<string>   CentroidWeightType           := 'Addresses',                                                                                                               Descr = "If you use a weighted centroid in the org set, how would you like to weigh it? Based on Population or Addresses ?";
	parameter<string>   Orgset_EnkeleBuurt_selectie  := 'BU00141705',                                                                                                              Descr = "If you choose a single neighbourhood for the OrgSet, which neighbourhood would you like to use? Examples: BU00140107  'Laanhuizen'; 'Elzenhof'; BU19010209";
	parameter<string>   Orgset_EnkeleGem_selectie    := 'GM0119',                                                                                                                  Descr = "If you choose a single municipality for the OrgSet, which municipality would you like to use? Examples: ";
	parameter<string>   Orgset_EnkeleProv_selectie   := 'Groningen',                                                                                                               Descr = "If you choose a single province for the OrgSet, which province would you like to use? Examples: ";
	parameter<string>   Orgset_EnkeleCorop_selectie  := 'Flevoland'; //Als je een enkele corop selecteert bij OrgSet, welke provincie wil je dan?
	parameter<string>   Destset_Enkele_selectie      := '91',                                                                                                                      Descr = "If you choose a single destination for the DestSet, which destination name would you like to use? Examples: ";
	parameter<bool>     Export_AfgelegdeAfstand      := TRUE,                                                                                                                      Descr = "export (and with that, calculate) the travelled distance in the output cvs's for private transport.";
	
	//OV-berekening instellingen
	parameter<string>   GTFS_file_date               := rjoin(AnalyseMoment, Advanced/AnalyseMomentPresets/name, Advanced/AnalyseMomentPresets/GTFS_file_date),                    Descr = "GTFS file date #'20191007' #20201002 20211001 20120917";
	parameter<string>   Analysis_date                := rjoin(AnalyseMoment, Advanced/AnalyseMomentPresets/name, Advanced/AnalyseMomentPresets/PT_analysis_date),                  Descr = "GTFS model date #'20191008' 20201006 20201004 20211005 20211003 20171003 (=dinsdag) 20171001 (=zondag)", IntegrityCheck = "uint32(this) >= uint32(GTFS_file_date) && uint32(this) <= uint32(GTFS_file_date) + 100";

	parameter<min_f>    MaxPedestrianTime_Org2Stop   := 10[min_f],                                                                                                                 Descr = "Maximum walking time from org to the first stop, in minutes.";
	parameter<min_f>    MaxPedestrianTime_Stop2Dest  := 10[min_f],                                                                                                                 Descr = "Maximum walking time from the last stop to the dest, in minutes.";
	parameter<min_f>    MaxBikeTime_Org2Stop         := 15[min_f],                                                                                                                 Descr = "Maximum biking time from org to the first stop, in minutes.";
	parameter<min_f>    MaxBikeTime_Stop2Dest        := 10[min_f],                                                                                                                 Descr = "Maximum biking time from the last stop to the dest, in minutes.";
	parameter<min_f>    MaxPedestrianTime_Org2Dest   := 20[min_f],                                                                                                                 Descr = "Maximale walking time when traveling directly from the org to the destination, in minutes";
	parameter<min_f>    MaxBikeTime_Org2Dest         := 30[min_f],                                                                                                                 Descr = "Maximale biking time when traveling directly from the org to the destination, in minutes";
	parameter<min_f>    MaxOVTime                    := 45[min_f],                                                                                                                 Descr = "Maximale travel time with public transport, in minutes. This is can be used to limit calculation times. NOTE: this could mean that the location furthest away might not be reached. If a distance decay variant is used, it might not be a big issue, however it will be when calculating a full OD-matrix!";
	parameter<min_f>    OngelijkvloersPenalty        := 2[min_f],                                                                                                                  Descr = "Is there a stop with a lot of vertical distance to travelled when changing? Here you can specify a time penalty when changing at this stop, in minutes.";
	parameter<bool>     UseActualBikeSpeeds          := FALSE,                                                                                                                     Descr = "Use actual bike speeds in public transport calculation for pre- and post-transports. TRUE: use FietsTelWeek data biking speeds. FALSE: use a default value, as specified below.";
	
	//Auto berekening instellingen
	parameter<min_f>    MaxCarTime_Org2Dest          := 60[min_f],                                                                                                                 Descr = "Maximum car travel time from org to dest.";
	
	container Advanced
	{
		parameter<bool>     Create_Symmetric_fullOD      := FALSE,                                                                                                                 Descr = "If you want a full OD-matrix, i.e. orgset=destset.";
		parameter<bool>     Getiled_berekenen            := TRUE,                                                                                                                  Descr = "If you want to tile your calculations to speed up calculation times (and decrease the chance of crashed due to large memory consumption issues.";
		parameter<string>   Regio_voor_Tiling            := 'corop',                                                                                                               Descr = "This region layout determines which layout to be use when tiling. Options: 'corop', 'provincie'";
		parameter<string>   BAG_jaar                     := RegioIndelingen_jaar,                                                                                                  Descr = "The BAG year is now dependent on region year. This is used for calculating the centroids. ";
		parameter<string>   RegioIndelingen_jaar         := rjoin(AnalyseMoment, Advanced/AnalyseMomentPresets/name, Advanced/AnalyseMomentPresets/RegioIndelingen_jaar),          Descr = "The year for the region layouts.";
		parameter<bool>     Dests_geclusterd             := FALSE,                                                                                                                 Descr = "If you want to cluster destinations. This is recommended for LISA, where there are many locations almost on top of each other.";
		parameter<string>   items_of_interest            := rjoin(lowercase(DestSet), lowercase(Advanced/dest_domain_list/label), Advanced/dest_domain_list/items_of_interest),    Descr = "What is the name of the item of interest? huisartsenposten, nr_pc4, etc.";
		parameter<string>   Arrival_or_Departure_at_time := 'Departure',                                                                                                           Descr = "Are the analysis times arrival or departure times? Options: 'Arrival'  'Departure'";
		parameter<m>        MaxTransferDistKm            := 500[m],                                                                                                                Descr = "Maximum euclidean walking distance between public transport stops for changing, in withers.";
		parameter<float32>  MaxODconn                    := 25f,                                                                                                                   Descr = "Maximum number of stops to search for when connecting stop to the org and dest locations.";
		parameter<string>   OSM_file_date                := rjoin(AnalyseMoment, Advanced/AnalyseMomentPresets/name, Advanced/AnalyseMomentPresets/OSM_file_date),                 Descr = "OpenStreetMap file date #'20200117' 20211004 '20211221' 20221201";

		unit<uint8>  AnalyseMomentPresets : nrofrows = 4
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// name, OSM date , Regios, GTFS date, PT analysis date
				[
				'Y2018','20240101', '2018', '20181002', '20181009', //tuesday
				'Y2019','20240101', '2019', '20191007', '20191008', //tuesday
				'Y2022','20240101', '2022', '20220928', '20221004', //tuesday
				'Y2023','20240101', '2023', '20231003', '20181010'  //tuesday
				];
			}
			
			attribute<string>        name                    := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        OSM_file_date           := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
			attribute<string>        RegioIndelingen_jaar    := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			attribute<string>        GTFS_file_date          := Elements/Text[value(UInt32(ID(.))* nrAttr + 3, Elements)];
			attribute<string>        PT_analysis_date        := Elements/Text[value(UInt32(ID(.))* nrAttr + 4, Elements)];
			
			parameter<uint32> nrAttr := 5;
		}
	
		unit<uint32> org_domain_list : nrofrows = 22
		,  Descr = "Here, the paths for each org set is provided"
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Label, Path
				[
				'Buurt'                               ,'SourceData/RegionalUnits/Buurt/Centroiden',
				'Buurt_perProvincie'                  ,'SourceData/RegionalUnits/Buurt/Per_Prov/@REGIO@/sub',
				'Buurt_perCOROP'                      ,'SourceData/RegionalUnits/Buurt/Per_COROP/@REGIO@/sub',
				'Buurt_enkele_buurt'                  ,'SourceData/RegionalUnits/Buurt/Enkele_buurt',
				'Buurt_enkele_Prov'                   ,'SourceData/RegionalUnits/buurt/Enkele_Prov',
				
				'Wijk'                                ,'SourceData/RegionalUnits/Wijk/Centroiden',
				'Wijk_perProvincie'                   ,'SourceData/RegionalUnits/Wijk/Per_Prov/@REGIO@/sub',
				'Wijk_perCOROP'                       ,'SourceData/RegionalUnits/Wijk/Per_COROP/@REGIO@/sub',
				
				'Gemeente'                            ,'SourceData/RegionalUnits/Gemeente/Centroiden',
				'Gemeente_perProvincie'               ,'SourceData/RegionalUnits/Gemeente/Per_Prov/@REGIO@/sub',
				'Gemeente_perCOROP'                   ,'SourceData/RegionalUnits/Gemeente/Per_COROP/@REGIO@/sub',
				'Gemeente_enkele_gemeente'            ,'SourceData/RegionalUnits/Gemeente/Enkele_gemeente',
				
				'PC4'                                 ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids',
				'PC4_perCOROP'                        ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids/Per_COROP/@REGIO@/sub',
				'PC4_enkele_Corop'                    ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids/Enkele_Corop',
				'PC4_all'                             ,'SourceData/BAG/Adressen/Voorraad/PC4_centroids',
				'PC4_all_perCOROP'                    ,'SourceData/BAG/Adressen/Voorraad/PC4_centroids/Per_COROP/@REGIO@/sub',
				'PC4_all_enkele_Corop'                ,'SourceData/BAG/Adressen/Voorraad/PC4_centroids/Enkele_Corop',
				
				'PC6'                                 ,'SourceData/BAG/Adressen/Woon_Voorraad/PC6_centroids',
				'PC6_sub'                             ,'SourceData/BAG/Adressen/Woon_Voorraad/PC6_centroids/sub',

				'BAG_woonpanden'                      ,'SourceData/BAG/Panden/pand/pand_woon_vbo',
				'BAG_woonpanden_Clustered'            ,'SourceData/BAG/Panden/pand/pand_woon_vbo/HeeftPanden'
				]; 
			}
			
			attribute<uint32>        id              := id(.);
			attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        path           := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)], DialogType = "LabelText";
			
			parameter<uint32> nrAttr := 2;
		}
		
		unit<uint32> dest_domain_list : nrofrows = 3
		,  Descr = "Here, the paths for each dest set is provided"
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Label, Path
				[
				 'PC4'                                                            ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids'                                                              , 'nr_pc4'
				,'PC4_all'                                                        ,'SourceData/BAG/Adressen/Voorraad/PC4_centroids'                                                                   , 'nr_pc4'
				,'PC4_sub1'                                                       ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids/sub1'                                                         , 'nr_pc4'
				]; 
			}
			
			attribute<uint32>        id                := id(.);
			attribute<string>        label             := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        path              := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)], DialogType = "LabelText";
			attribute<string>        items_of_interest := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			
			
			parameter<uint32> nrAttr := 3;
		}
		
		unit<uint32> Export_CombinationTypes : nrofrows = 1 //Geef hieraan welke combinaties van vervoersmiddelen er gegeneerd moeten worden. Bij combinaties, wordt er per OD-paar de korste reistijd gekozen.
		{
			attribute<string> name : 
			[
				 // 'WW'                        //walk directly from org to dest
				// ,'BB'                        //bike directly from org to dest
				 // 'W_OV_W'                    //from org walking, then PT, then walking to dest
				// ,'B_OV_W'                    //from org biking, then PT, then walking to dest.
				// ,'B_Tic_OV_W'                //from org biking to IC-trainstation, then OV, then walking to dest.
				// ,'B_T_OV_W'                  //from org biking to trainstation, then PT, then walking to dest.
				// ,'B_TM_OV_W'                 //from org biking to train or metro station, then PT, then walking to dest.
				// ,'B_TM_OV_B'                 //from org biking to train or metro station, then PT, then biking to dest.
				// ,'B_TMT_OV_W'                //from org biking to train, metro, or tram station, then PT, then walking to dest.
				// ,'B_TMT_OV_B'                //from org biking to train, metro, or tram station, then PT, then biking to dest.
				'W_OV_W_with_WW'            //from org walking, then PT, then walking to dest; combined with directly walking from org to dest.
				// ,'B_OV_W_with_BB'            //from org biking, then PT, then walking to dest; combined with directly biking from org to dest.
				// ,'B_Tic_OV_W_with_BB'        //from org biking to IC-trainstation, then PT, then walking to dest; combined with directly biking from org to dest.
				// ,'B_Tic_OV_W_with_W_OV_W_BB' //from org biking to IC-trainstation, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest.
				// ,'B_Tic_OV_W_with_W_OV_W_WW' //from org biking to IC-trainstation, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly walking from org to dest.
				// ,'B_Tic_OV_W_with_B_OV_W_BB' //from org biking to IC-trainstation, then PT, then walking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest.
				// ,'B_T_OV_W_with_BB'          //from org biking to trainstation, then PT, then walking to dest; combined with directly biking from org to dest.
				// ,'B_T_OV_W_with_W_OV_W_BB'   //from org biking to trainstation, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_T_OV_W_with_W_OV_W_WW'   //from org biking to trainstation, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly walking from org to dest. 
				// ,'B_T_OV_W_with_B_OV_W_BB'   //from org biking to trainstation, then PT, then walking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TM_OV_W_with_BB'         //from org biking to train or metro station, then PT, then walking to dest; combined with directly biking from org to dest.
				//,'B_TM_OV_W_with_W_OV_W_BB'   //from org biking to train or metro station, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// 'B_TM_OV_W_with_W_OV_W_WW'   //from org biking to train or metro station, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly walking from org to dest. 
				// ,'B_TM_OV_W_with_B_OV_W_BB'  //from org biking to train or metro station, then PT, then walking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TMT_OV_W_with_BB'        //from org biking to train, metro, or tram station, then PT, then walking to dest; combined with directly biking from org to dest.
				// ,'B_TMT_OV_W_with_W_OV_W_BB' //from org biking to train, metro, or tram station, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TMT_OV_W_with_B_OV_W_BB' //from org biking to train, metro, or tram station, then PT, then walking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TMT_OV_W_with_W_OV_W_WW' //from org biking to train, metro, or tram station, then PT, then walking to dest; combined with walking from org, then PT, and walking to dest; combined with directly walking from org to dest. 
				// ,'B_TMT_OV_W_with_B_OV_W_WW' //from org biking to train, metro, or tram station, then PT, then walking to dest; combined with biking from org, then PT, and walking to dest; combined with directly walking from org to dest. 
				// ,'B_Tic_OV_B_with_BB'        //from org biking to IC-trainstation, then PT, then biking to dest; combined with directly biking from org to dest.
				// ,'B_Tic_OV_B_with_W_OV_W_BB' //from org biking to IC-trainstation, then PT, then biking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest.
				// ,'B_Tic_OV_B_with_B_OV_W_BB' //from org biking to IC-trainstation, then PT, then biking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest.
				// ,'B_T_OV_B_with_BB'          //from org biking to trainstation, then PT, then biking to dest; combined with directly biking from org to dest.
				// ,'B_T_OV_B_with_W_OV_W_BB'   //from org biking to trainstation, then PT, then biking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_T_OV_B_with_B_OV_W_BB'   //from org biking to trainstation, then PT, then biking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TM_OV_B_with_BB'         //from org biking to train or metro station, then PT, then biking to dest; combined with directly biking from org to dest.
				// ,'B_TM_OV_B_with_W_OV_W_BB'  //from org biking to train or metro station, then PT, then biking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TM_OV_B_with_B_OV_W_BB'  //from org biking to train or metro station, then PT, then biking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TMT_OV_B_with_BB'        //from org biking to train, metro, or tram station, then PT, then biking to dest; combined with directly biking from org to dest.
				// ,'B_TMT_OV_B_with_W_OV_W_BB' //from org biking to train, metro, or tram station, then PT, then biking to dest; combined with walking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TMT_OV_B_with_B_OV_W_BB' //from org biking to train, metro, or tram station, then PT, then biking to dest; combined with biking from org, then PT, and walking to dest; combined with directly biking from org to dest. 
				// ,'B_TMT_OV_B_with_W_OV_W_WW' //from org biking to train, metro, or tram station, then PT, then biking to dest; combined with walking from org, then PT, and walking to dest; combined with directly walking from org to dest. 
				// ,'B_TMT_OV_B_with_B_OV_W_WW' //from org biking to train, metro, or tram station, then PT, then biking to dest; combined with biking from org, then PT, and walking to dest; combined with directly walking from org to dest. 
				// ,'B_OV_B_with_BB'            //from org biking, then PT, then biking to dest; combined with directly biking from org to dest.)
			];
		}
	
		parameter<string>   Dest_location_scale               := '100m',                                                                                               Descr = "The scale at what you would like to cluster dests if you choose to cluster. Options: '100m', '500m', '1000m', '5000m', '10000m', '50000m'";
		parameter<m_s>      TransferEffectiveSpeed            := value(4[km_hr] / 1.2f, m_s),                                                                          Descr = "The transfer walking speed: X km/hour / 1.2 (correction for Manhattan distances) and then converted to meter/sec.";
		parameter<string>   fileNamePrefix                    := Getiled_berekenen ? '%LocalDataProjDir%/Output/PerRegio/' : '%LocalDataProjDir%/Output/',             Descr = "Location where output files should be stored.";
		parameter<float32>  WegingWachttijdThuisVoortransport := 0f,                                                                                                   Descr = "Would you like to include the waiting time at home in the total travel time, if you travelling from a certain departure time";
		parameter<uint8>    NumberOfItersForNetworkCleanUp    := 10b,                                                                                                  Descr = "";
		parameter<string>   PrevDate                          := string(uint32(Analysis_date) - 1),                                                                    Descr = "";
		parameter<string>   Date_prefix                       := substr(Analysis_date, 0, 4) + '/' + substr(Analysis_date, 4, 2) + '/' +  substr(Analysis_date, 6, 2), Descr = "";
		parameter<Weekdays> Today                             := /units/Weekdays/V/tuesday[Weekdays],                                                                  Descr = "Relevant for PT-calculation";
		parameter<Weekdays> Yesterday                         := Weekdays/PrevRef[Today],                                                                              Descr = "";
		
		parameter<km_hr>    WalkingSpeed_kmhr                 := 4.5[km_hr],                                                                                           Descr = "";
		parameter<km_hr>    BikingSpeed_kmhr                  := 14[km_hr],                                                                                            Descr = "";
		parameter<m_s>      WalkingSpeed                      := WalkingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km],                                                  Descr = "";
		parameter<m_s>      BikingSpeed                       := BikingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km],                                                   Descr = "";
		parameter<km_hr>    MaxCarSpeed                       := 130[km_hr],                                                                                           Descr = "";
		parameter<km_hr>    MaxCarSpeed_limit                 := 100[km_hr],                                                                                           Descr = "";
		parameter<km_hr>    PedestrianDefaultSpeed            := WalkingSpeed_kmhr,                                                                                    Descr = "";
		parameter<km_hr>    BikeDefaultSpeed                  := BikingSpeed_kmhr,                                                                                     Descr = "";
		parameter<km_hr>    CarDefaultSpeed                   := 50[km_hr],                                                                                            Descr = "";
		parameter<km_hr>    CarDefaultSpeed_low               := 30[km_hr],                                                                                            Descr = "";
		parameter<km_hr>    Ferry_Speed                       := 25[km_hr],                                                                                            Descr = "";
		
		parameter<string>   DestSet_string                    := Create_Symmetric_fullOD 
																	? lowercase(Orgset) 
																	: Dests_geclusterd 
																		? lowercase(Destset) + '_' + lowercase(Dest_location_scale)
																		: lowercase(Destset);
		parameter<string>   Orgset_str                        := Getiled_berekenen ? lowercase(Orgset)+'_per'+lowercase(Regio_voor_Tiling) : lowercase(Orgset),        Descr = "'PC6_domain_corop'; //'PC6full' 'PC6sub' 'PC4full' 'PC4sub' PC6sub_MRA PC6sub_Pijp Point100m LocatiesMachiel Buurtsub_MRA  //org punten selectie";
		unit<uint32>        Regio                             := =Getiled_berekenen ? 'RegionalUnits' : 'SourceData/RegionalUnits/NL',                                  Descr = "Als je getiled wilt rekenen, zorgt dit dat je verwijst to die tiling, of to heel NL in één keer.";
		unit<uint32>        RegionalUnits                     := ='SourceData/RegionalUnits/'+Regio_voor_Tiling,                                                        Descr = "";
	
		unit<uint32> SampleDay := select_with_attr_by_org_rel(Time, Time/Day = 0)
		, Descr = "Here you can provide the analysis times for public transport, split up in hours and in minutes."
		{
			attribute<bool>    ChosenMoments   := =AsList(HoursMinutes/str,' || ');
			attribute<Time>    Time_rel        := org_rel;
			
			unit<uint8> ChosenHours : nrofrows = 1
			{
				// attribute<uint32> values : [7,8,12,13,21,22];
				attribute<uint32> values : [7];
			}
			unit<uint8> ChosenMinutes : nrofrows = 1
			{
				// attribute<uint32> values : [0,5,10,15,20,25,30,35,40,45,50,55]; 
				attribute<uint32> values : [0]; 
			}
			unit<uint8> HoursMinutes := combine_uint8(ChosenHours, ChosenMinutes)
			{
				attribute<uint32> Hours     := ChosenHours/values[first_rel];
				attribute<uint32> Minutes   := ChosenMinutes/values[second_rel];
				attribute<string> str       := '(hour == '+string(Hours)+' && minute == '+string(Minutes)+' && second == 0)';
			}
		}
		
		unit<uint32> MeasureMoments := select_with_attr_by_cond(SampleDay, SampleDay/ChosenMoments)
		{
			attribute<Time>    Moment := Time_rel;
			attribute<string>  Name   := Time/TemplatableText[Moment];
		}
		
		container Combines
		{
			unit<uint32> Dijkstra_attributes : nrofrows = 3
			{
				attribute<string>    name : ['Impethence','OrgZone_rel','DstZone_rel'];
			}
			unit<uint32> MomentXattributes := combine(MeasureMoments,Dijkstra_attributes)
			{
				attribute<string> MomentName       := MeasureMoments/name[nr_1];
				attribute<string> DijkstraAttrName := Dijkstra_attributes/name[nr_2];
				attribute<string> name             := MomentName + '_' + DijkstraAttrName;
			}
		}
		
		unit<uint32> TransitionType_list : nrofrows = 8
		{
			attribute<string> Type     : ['Org2Stop_W'   ,'Org2Stop_B'   ,'Org2Stop_B_Tic' ,'Org2Stop_B_T' ,'Org2Stop_B_TM' ,'Org2Stop_B_TMT' ,'Stop2Dest_W'  ,'Stop2Dest_B'];
			attribute<string> Type_shrt: ['O2S'   ,'O2S'   ,'O2S' ,'O2S' ,'O2S' ,'O2S' ,'S2D'  ,'S2D'];
			attribute<string> Mode     : ['Walk'         ,'Bike'         ,'Bike'           ,'Bike'         ,'Bike'          ,'Bike'          ,'Walk'         ,'Bike'];
			attribute<string> OrgDest  : ['Origin'       ,'Origin'       ,'Origin'         ,'Origin'       ,'Origin'        ,'Origin'        ,'Dest'         ,'Dest'];
			attribute<min_f>  ModeMax  := ='union_data(.,MaxPedestrianTime_Org2Stop,MaxBikeTime_Org2Stop,MaxBikeTime_Org2Stop,MaxBikeTime_Org2Stop,MaxBikeTime_Org2Stop,MaxBikeTime_Org2Stop,MaxPedestrianTime_Stop2Dest,MaxBikeTime_Stop2Dest)';
		}
		
		unit<uint32> OSM_Regios : nrofrows = 4
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Regio             , OrgSet , OrgPath, Land, Type, 
				[
				'Netherlands'             ,'NL', 'OD',
				'Belgium'                 ,'BE', 'OD',
				'Niedersachsen'           ,'DE', 'OD',
				'Nordrhein-westfalen'     ,'DE', 'OD'
				]; 
			}
			
			attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
			attribute<string>        name           := replace(label, '-', '_');
			
			parameter<uint32> nrAttr := 3;
		}
	}
}
