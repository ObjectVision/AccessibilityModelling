container Geometries : using = "units"
{
	#include <wms_layer_latlong.dms>
	#include <ngr_layer.dms> // reference WMS layer
	
	unit<dpoint> rdc_base          : SpatialReference = "EPSG:28992", DialogData = "ngr_layer";
	unit<fpoint> rdc               := range(rdc_base, point_yx(y_min, x_min), point_yx(y_max, x_max));
	unit<ipoint> rdc_mm            := gridset(rdc, point_yx(0.001,0.001), point_yx(0.0, 0.0), ipoint);
	unit<dpoint> WGS84             : SpatialReference = "EPSG:4326", DialogData = "wms_layer_latlong"
	{
		parameter<float32> ViewPortMinSize := 100f / 3600f;
		parameter<float32> PenWorldWidth   := 0.1f / 3600f, DialogType = "PenWorldWidth";
		parameter<float32> LabelWorldSize  := 10f / 3600f, DialogType = "LabelWorldSize";
		parameter<float32> SymbolWorldSize := 10f / 3600f, DialogType = "SymbolWorldSize";
	}
	unit<fpoint> LambertEA_base   : SpatialReference = "EPSG:3035", DialogData = "ngr_layer_lea";
	unit<fpoint> LambertEA        := range(LambertEA_base, point_xy(2500000f, 1300000f), point_xy(4900000f, 4300000f));
	
	parameter<m> x_min := 0[m];
	parameter<m> x_max := 280000[m];
	parameter<m> y_min := 300000[m];
	parameter<m> y_max := 625000[m];

	unit<ipoint> rdc_10m   := perGridsize/size_10m/domain;
	unit<ipoint> rdc_25m   := perGridsize/size_25m/domain;
	unit<ipoint> rdc_100m  := perGridsize/size_100m/domain;
	unit<ipoint> rdc_250m  := perGridsize/size_250m/domain;
	unit<ipoint> rdc_500m  := perGridsize/size_500m/domain;
	
	unit<uint32> Gridsizes : nrofrows = 5
	{
		attribute<string>  size_str : ['10', '25', '100', '250', '500'];
		attribute<m>       size     := size_str[m];
		attribute<string>  name     := 'size_'+string(size)+'m';
	}
	
	container perGridsize := 
		for_each_ne(
			Gridsizes/name
			, 'Create_GridDomain_T('+string(Gridsizes/size)+'[m])'
		);
		
	unit<uint32> selection_polygon : nrofrows = 1, Using = "units"
	{
		parameter<rdc> top_left     := point_xy(x_min - 5000[m], y_max + 5000[m], rdc); //XY
		parameter<rdc> top_right    := point_xy(x_max + 5000[m], y_max + 5000[m], rdc);
		parameter<rdc> bottom_left  := point_xy(x_min - 5000[m], y_min - 5000[m], rdc);
		parameter<rdc> bottom_right := point_xy(x_max + 5000[m], y_min - 5000[m], rdc);
		
		unit<uint32> point_set : nrofrows = 5
		{
			attribute<rdc>  point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
			attribute<..>   sequence_rel := const(0, .);
			attribute<.>    ordinal      := id(.);
		}
		
		attribute<rdc> polygon (poly)      := points2sequence(point_set/point, point_set/sequence_rel, point_set/ordinal);
	}
	
	unit<uint8> Matrix : nrofrows = 23
	{
		attribute<m>      Size : [ 0, 17, 25, 50, 100, 150, 200, 300, 500, 625, 1000, 1250, 1500, 2000, 2250, 2500, 3250, 5000, 5250, 10000, 10250, 20000, 20250 ];
		attribute<string> name := 'pot'+string(size)+'m';
	}
	
	container Distmatrices_25m  := for_each_nex(Matrix/name, 'Distmatrices/Impl_25m/'+Matrix/name+'/PotRange', spoint);
	container Distmatrices_100m := for_each_nex(Matrix/name, 'Distmatrices/Impl_100m/'+Matrix/name+'/PotRange', spoint);
	
	container Distmatrices // := for_each_nex(Matrix/name, 'Impl/'+Matrix/name+'/PotRange', spoint)
	{
		unit<uint32> Dist2Range;
		
		template potrange
		{
			parameter<m>       gridgrootte;
			parameter<m>       afkapstraal;
			parameter<float32> straal       := afkapstraal / gridgrootte;
			parameter<float32> oppervlakte  := pi()[float32] * straal^2f;
			
			unit<spoint> tmpRange := range(spoint, point_yx(-int16(straal), -int16(straal)), point_yx(int16(straal) + 1s, int16(straal) + 1s));
			unit<spoint> potRange := tmpRange
			{
				attribute<Dist2Range> distMatr          := dist2(point_yx(0s, 0s, tmpRange), Dist2Range);
				attribute<float32>    dist              := sqrt(float32(distMatr));
				attribute<float32>    dist_scaled       := dist / straal;
				
				attribute<float32>    rev_dist          := max_elem(straal - dist, 0f);
				parameter<float32>    rev_dist_max      := max(rev_dist);
				attribute<float32>    rev_dist_scaled   := rev_dist / rev_dist_max;
				attribute<float32>    AbsWeight         := distMatr[float32] <= (straal * straal) 
															? distMatr[float32] != 0f 
																? 1f / (distMatr[float32] ^ 2f) 
																: 1f
															: 0f;
				attribute<float32>    AbsWeight_ln      := distMatr[float32] <= (straal * straal) 
															? distMatr[float32] != 0f 
																? 1f / (distMatr[float32] / straal) 
																: 1f 
															: 0f;
				attribute<float32>    RelWeight         := scalesum(     AbsWeight , 1.0f);
				attribute<float32>    RelWeightSqrt     := scalesum(Sqrt(AbsWeight), 1.0f);
				attribute<float32>    Flat2             := float32(distMatr <= uint32(straal * straal));
				attribute<float32>    Flat_Visualisatie := dist <= 1.5f ? 1f : 0f;
				attribute<float32>    neighbourhood     := distMatr > 0 ? 1f : 0f;
				parameter<float32>    oppervlakte       := sum(Flat2);
				attribute<float32>    binair            := distMatr <= 100 ? 1f : 0f;
			}
		}
		
		container Impl_10m  := for_each_ne(Matrix/name, 'potrange(10[m],'+string(Matrix/size)+'[m])');
		container Impl_25m  := for_each_ne(Matrix/name, 'potrange(25[m],'+string(Matrix/size)+'[m])');
		container Impl_100m := for_each_ne(Matrix/name, 'potrange(100[m],'+string(Matrix/size)+'[m])');
	}	
		
	Template Create_GridDomain_T
	{
		parameter<m> gridsize;
		//
		parameter<int32> nr_cols := int32((x_max - x_min) / gridsize);
		parameter<int32> nr_rows := int32((y_max - y_min) / gridsize);
		
		unit<ipoint> domain :=
			range(
				 gridset(
					 rdc
					,point_yx(-gridsize, gridsize, rdc)
					,point_yx(y_max, x_min, rdc)
					,ipoint
				)
				,point_yx(0i, 0i)
				,point_yx(nr_rows, nr_cols)
			),	DialogData = "rdc"
		{
			parameter<m>                    gridsize        := ../gridsize;
			parameter<int32>                nr_cols         := ../nr_cols;
			attribute<rdc>                  point           := mapping(., rdc) + point_yx(-0.5f * gridsize, 0.5f * gridsize, rdc);
			unit<uint32>                    id_key          := range(uint32, 0, #domain);
			attribute<uint32>               id_rel          := value(uint32(pointrow(id(.))) * uint32(nr_cols) + uint32(pointcol(id(.))), id_key);
			
			attribute<rdc_25m>              rdc_25m_rel     := mapping(., rdc_25m);
			attribute<rdc_100m>             rdc_100m_rel    := mapping(., rdc_100m);
			attribute<rdc_250m>             rdc_250m_rel    := mapping(., rdc_250m);
			attribute<rdc_500m>             rdc_500m_rel    := mapping(., rdc_500m);
			
			parameter<ha>                   NrHaPerCell     := convert(gridsize * gridsize, ha);
			parameter<km2>                  NrKm2PerCell    := NrHaPerCell[km2];
			attribute<bool>                 IsNederland     := IsDefined(poly2grid(/SourceData/RegionalUnits/NL/geometry, .));
		}
		
		unit<uint64> points := select_with_org_rel(isDefined(domain/point) && domain/IsNederland)
		{
			attribute<rdc>                  geometry  := org_rel -> point;
			attribute<float32>              x         := PointCol(geometry);
			attribute<float32>              y         := PointRow(geometry);
			attribute<domain>               grid_rel  := geometry[domain];	
		}
	}	
}