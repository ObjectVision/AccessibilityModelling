container Geometries : using = "units"
{
	#include <wms_layer_latlong.dms>
	#include <ngr_layer.dms> // reference WMS layer
	
	unit<dpoint> rdc_base          : SpatialReference = "EPSG:28992", DialogData = "ngr_layer";
	unit<dpoint> rdc               := range(rdc_base, point(y_min, x_min), point(y_max, x_max));
	unit<ipoint> rdc_mm   := gridset(rdc, point(0.001,0.001), point(0.0, 0.0), ipoint);
	unit<dpoint> WGS84             : SpatialReference = "EPSG:4326", DialogData = "wms_layer_latlong"
	{
		parameter<float32> ViewPortMinSize := 100f / 3600f;
		parameter<float32> PenWorldWidth   := 0.1f / 3600f, DialogType = "PenWorldWidth";
		parameter<float32> LabelWorldSize  := 10f / 3600f, DialogType = "LabelWorldSize";
		parameter<float32> SymbolWorldSize := 10f / 3600f, DialogType = "SymbolWorldSize";
	}
	
	parameter<m> x_min := 0[m];
	parameter<m> x_max := 280000[m];
	parameter<m> y_min := 300000[m];
	parameter<m> y_max := 625000[m];

	unit<ipoint> rdc_10m   := perGridsize/size_10m/domain;
	unit<ipoint> rdc_25m   := perGridsize/size_25m/domain;
	unit<ipoint> rdc_100m  := perGridsize/size_100m/domain;
	unit<ipoint> rdc_250m  := perGridsize/size_250m/domain;
	unit<ipoint> rdc_500m  := perGridsize/size_500m/domain;
	
	unit<uint32> Gridsizes : nrofrows = 5
	{
		attribute<string>  size_str : ['10', '25', '100', '250', '500'];
		attribute<m>       size     := size_str[m];
		attribute<string>  name     := 'size_'+string(size)+'m';
	}
	
	container perGridsize := 
		for_each_ne(
			Gridsizes/name
			, 'Create_GridDomain_T('+string(Gridsizes/size)+'[m])'
		);
		
	unit<uint8> Matrix : nrofrows = 23
	{
		attribute<m>      Size : [ 0, 17, 25, 50, 100, 150, 200, 300, 500, 625, 1000, 1250, 1500, 2000, 2250, 2500, 3250, 5000, 5250, 10000, 10250, 20000, 20250 ];
		attribute<string> name := 'pot'+string(size)+'m';
	}
	
	container Distmatrices_25m  := for_each_nex(Matrix/name, 'Distmatrices/Impl_25m/'+Matrix/name+'/PotRange', spoint);
	container Distmatrices_100m := for_each_nex(Matrix/name, 'Distmatrices/Impl_100m/'+Matrix/name+'/PotRange', spoint);
	
	container Distmatrices // := for_each_nex(Matrix/name, 'Impl/'+Matrix/name+'/PotRange', spoint)
	{
		unit<uint32> Dist2Range;
		
		template potrange
		{
			parameter<m>       gridgrootte;
			parameter<m>       afkapstraal;
			parameter<float64> straal       := afkapstraal / gridgrootte;
			parameter<float64> oppervlakte  := pi()[float64] * straal^2d;
			
			unit<spoint> tmpRange := range(spoint, point(-int16(straal), -int16(straal)), point(int16(straal) + 1s, int16(straal) + 1s));
			unit<spoint> potRange := tmpRange
			{
				attribute<Dist2Range> distMatr          := dist2(point(0s, 0s, tmpRange), Dist2Range);
				attribute<float64>    dist              := sqrt(float64(distMatr));
				attribute<float64>    dist_scaled       := dist / straal;
				
				attribute<float64>    rev_dist          := max_elem(straal - dist, 0d);
				parameter<float64>    rev_dist_max      := max(rev_dist);
				attribute<float64>    rev_dist_scaled   := rev_dist / rev_dist_max;
				attribute<float64>    AbsWeight         := distMatr[float64] <= (straal * straal) 
															? distMatr[float64] != 0d 
																? 1d / (distMatr[float64] ^ 2d) 
																: 1d
															: 0d;
				attribute<float64>    AbsWeight_ln      := distMatr[float64] <= (straal * straal) 
															? distMatr[float64] != 0d 
																? 1d / (distMatr[float64] / straal) 
																: 1d 
															: 0d;
				attribute<float64>    RelWeight         := scalesum(     AbsWeight , 1.0d);
				attribute<float64>    RelWeightSqrt     := scalesum(Sqrt(AbsWeight), 1.0d);
				attribute<float64>    Flat2             := float64(distMatr <= uint32(straal * straal));
				attribute<float64>    Flat_Visualisatie := dist <= 1.5d ? 1d : 0d;
				attribute<float64>    neighbourhood     := distMatr > 0 ? 1d : 0d;
				parameter<float64>    oppervlakte       := sum(Flat2);
				attribute<float64>    binair            := distMatr <= 100 ? 1d : 0d;
			}
		}
		
		container Impl_10m  := for_each_ne(Matrix/name, 'potrange(10[m],'+string(Matrix/size)+'[m])');
		container Impl_25m  := for_each_ne(Matrix/name, 'potrange(25[m],'+string(Matrix/size)+'[m])');
		container Impl_100m := for_each_ne(Matrix/name, 'potrange(100[m],'+string(Matrix/size)+'[m])');
	}	
		
	Template Create_GridDomain_T
	{
		parameter<m> gridsize;
		//
		parameter<int32> nr_cols := int32((x_max - x_min) / gridsize);
		parameter<int32> nr_rows := int32((y_max - y_min) / gridsize);
		
		unit<ipoint> domain :=
			range(
				 gridset(
					 rdc
					,point(-gridsize, gridsize, rdc)
					,point(y_max, x_min, rdc)
					,ipoint
				)
				,point(0i, 0i)
				,point(nr_rows, nr_cols)
			),	DialogData = "rdc"
		{
			parameter<m>                    gridsize        := ../gridsize;
			parameter<int32>                nr_cols         := ../nr_cols;
			attribute<rdc>                  point           := mapping(., rdc) + point(-0.5d * gridsize, 0.5d * gridsize, rdc);
			unit<uint32>                    id_key          := range(uint32, 0, #domain);
			attribute<uint32>               id_rel          := value(uint32(pointrow(id(.))) * uint32(nr_cols) + uint32(pointcol(id(.))), id_key);
			
			attribute<rdc_25m>              rdc_25m_rel     := mapping(., rdc_25m);
			attribute<rdc_100m>             rdc_100m_rel    := mapping(., rdc_100m);
			attribute<rdc_250m>             rdc_250m_rel    := mapping(., rdc_250m);
			attribute<rdc_500m>             rdc_500m_rel    := mapping(., rdc_500m);
			
			parameter<ha>                   NrHaPerCell     := convert(gridsize * gridsize, ha);
			parameter<km2>                  NrKm2PerCell    := NrHaPerCell[km2];
			attribute<bool>                 IsNederland     := IsDefined(poly2grid(/SourceData/RegionalUnits/NL/geometry, .));
		}
		
		unit<uint64> points := select_with_org_rel(isDefined(domain/point) && domain/IsNederland)
		{
			attribute<rdc>                  geometry  := org_rel -> point;
			attribute<float64>              x         := PointCol(geometry);
			attribute<float64>              y         := PointRow(geometry);
			attribute<domain>               grid_rel  := geometry[domain];	
		}
	}	
}