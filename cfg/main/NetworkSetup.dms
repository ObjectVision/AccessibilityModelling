container NetworkSetup : using = "units;geometries;SourceData;Classifications"
{     
	container ConfigurationPerRegio := 
		for_each_ne(
			/ModelParameters/Advanced/Regio/name
			, 'ConfigurationPerRegio_T('+quote(ModelParameters/Advanced/Regio/name)+')'
		)
	{
		container Generate_Output
		{
			parameter<string> OUTPUT_Generate_PublicTransport_decay_CSVFiles        := =AsList(/ModelParameters/Advanced/Regio/name+'/PublicTransport/Generate_Output/OUTPUT_Generate_decay_CSVFiles',' + ');
			parameter<string> OUTPUT_Generate_PublicTransport_fullOD_long_CSVFiles  := =AsList(/ModelParameters/Advanced/Regio/name+'/PublicTransport/Generate_Output/OUTPUT_Generate_fullOD_long_CSVFiles',' + ');
			parameter<string> OUTPUT_Generate_PublicTransport_fullOD_wide_CSVFiles  := =AsList(/ModelParameters/Advanced/Regio/name+'/PublicTransport/Generate_Output/OUTPUT_Generate_fullOD_wide_CSVFiles',' + ');
			parameter<string> OUTPUT_Generate_Car_decay_CSVFiles                    := =AsList(ModelParameters/Advanced/Regio/name+'/PrivateTransport/Export_Car_Decayed',' + ');
			parameter<string> OUTPUT_Generate_Car_traveltimes_CSVFiles              := =AsList(ModelParameters/Advanced/Regio/name+'/PrivateTransport/Export_Car_Traveltimes',' + ');
			parameter<string> OUTPUT_Generate_Bike_decay_CSVFiles                   := =AsList(ModelParameters/Advanced/Regio/name+'/PrivateTransport/Export_Bike_Decayed',' + '); 
			parameter<string> OUTPUT_Generate_Bike_traveltimes_CSVFiles             := =AsList(ModelParameters/Advanced/Regio/name+'/PrivateTransport/Export_Bike_Traveltimes',' + '); 
			parameter<string> OUTPUT_Generate_Pedestrian_decay_CSVFiles             := =AsList(ModelParameters/Advanced/Regio/name+'/PrivateTransport/Export_Pedestrian_Decayed',' + '); 
			parameter<string> OUTPUT_Generate_Pedestrian_traveltimes_CSVFiles       := =AsList(ModelParameters/Advanced/Regio/name+'/PrivateTransport/Export_Pedestrian_Traveltimes',' + '); 
		}
	}
		
	Template ConfigurationPerRegio_T 
	{
		parameter<string> regio_name;

		unit<uint32> org := =impl/Org_domain
		{
			attribute<rdc>                   geometry          := =impl/Org_domain+'/geometry';
			attribute<string>                name           := =impl/Org_domain+'/name';
			attribute<float32>               nr_inwoners    := =impl/Org_domain+'/nr_inwoners[float32]';
		}
		
		unit<uint32> dest := =ModelParameters/Create_Symmetric_fullOD ? 'org' : 'impl/dest_src';
		
		container impl
		{
			container src := .;
			parameter<string> Org_domain        := replace(rjoin(ModelParameters/Advanced/Orgset_str, lowercase(ModelParameters/Advanced/org_domain_list/label), ModelParameters/Advanced/org_domain_list/path), '@REGIO@', regio_name);
			parameter<string> Dest_domain       := rjoin(lowercase(ModelParameters/DestSet), lowercase(ModelParameters/Advanced/dest_domain_list/label), ModelParameters/Advanced/dest_domain_list/path);
			
			unit<uint32> dest_src := =Dest_domain
			{
				attribute<uint32>                nr_items_of_interest := =Dest_domain+'/'+ModelParameters/items_of_interest;
				attribute<rdc>                   geometry             := =Dest_domain+'/geometry';
				attribute<string>                name                 := =Dest_domain+'/name';
				attribute<string>                label                := name;
			}
		}
		
		container PublicTransport := 
			for_each_ne(
				ModelParameters/Advanced/MeasureMoments/Name
				, 'PublicTransport_T('+string(ModelParameters/Advanced/MeasureMoments/Moment)+', '+quote(ModelParameters/Advanced/MeasureMoments/name)+')'
			)
		{
			container Generate_Output
			{
				parameter<string>   OUTPUT_Generate_decay_CSVFiles        := =AsList(ModelParameters/Advanced/MeasureMoments/Name+'/OUTPUT_Generate_decay_CSVFiles',' + ');
				parameter<string>   OUTPUT_Generate_fullOD_long_CSVFiles  := =AsList(ModelParameters/Advanced/MeasureMoments/Name+'/OUTPUT_Generate_fullOD_long_CSVFiles',' + ');
				parameter<string>   OUTPUT_Generate_fullOD_wide_CSVFiles  := =AsList(ModelParameters/Advanced/MeasureMoments/Name+'/OUTPUT_Generate_fullOD_wide_CSVFiles',' + ');
			}
			
			container ODConnections
			{
				unit<uint32> Stops                       := SourceData/Infrastructuur/GTFS/StudyAreaFeeds/Stops;
				unit<uint32> Stops_ICstations            := SourceData/Infrastructuur/GTFS/StudyAreaFeeds/Stops_ICstation;
				unit<uint32> Stops_Trainstations         := SourceData/Infrastructuur/GTFS/StudyAreaFeeds/Stops_Trainstation;
				unit<uint32> Stops_TrainMetrostation     := SourceData/Infrastructuur/GTFS/StudyAreaFeeds/Stops_TrainMetrostation;
				unit<uint32> Stops_TrainMetroTramstation := SourceData/Infrastructuur/GTFS/StudyAreaFeeds/Stops_TrainMetroTramstation;
				
				container RoadNets_Org2Stop_W    := templates/createNetwork(Org   ,Stops                       ,SourceData/Infrastructuur/OSM/Network_Pedestrian, 'Walking', 'Org2Stop');
				container RoadNets_Org2Stop_B    := templates/createNetwork(Org   ,Stops                       ,SourceData/Infrastructuur/OSM/Network_Bike      , 'Biking' , 'Org2Stop');
				container RoadNets_Org2StopIC_B  := templates/createNetwork(Org   ,Stops_ICstations            ,SourceData/Infrastructuur/OSM/Network_Bike      , 'Biking' , 'Org2Stop');
				container RoadNets_Org2StopT_B   := templates/createNetwork(Org   ,Stops_Trainstations         ,SourceData/Infrastructuur/OSM/Network_Bike      , 'Biking' , 'Org2Stop');
				container RoadNets_Org2StopTM_B  := templates/createNetwork(Org   ,Stops_TrainMetrostation     ,SourceData/Infrastructuur/OSM/Network_Bike      , 'Biking' , 'Org2Stop');
				container RoadNets_Org2StopTMT_B := templates/createNetwork(Org   ,Stops_TrainMetroTramstation ,SourceData/Infrastructuur/OSM/Network_Bike      , 'Biking' , 'Org2Stop');
				
				container RoadNets_Stop2Dest_W   := templates/createNetwork(Stops ,Dest                        ,SourceData/Infrastructuur/OSM/Network_Pedestrian, 'Walking', 'Stop2Dest');
				container RoadNets_Stop2Dest_B   := templates/createNetwork(Stops ,Dest                        ,SourceData/Infrastructuur/OSM/Network_Bike      , 'Biking' , 'Stop2Dest');
				
				container CreateODconnections : using = "/SourceData/Infrastructuur/GTFS/StaticNets"
				{
					container Sparse_uitwerking_Org2StopIC_B
					{
						unit<uint32> OD_path := RoadNets_Org2StopIC_B/Network/ODMatrix;
						
						unit<uint32> AB := join_equal_values_uint32(OD_path/Complete_Stops_rel, ScheduledSpaceTimeEvents/StopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
							attribute<rdc>                        geometry (arc)    := OD_path/geometry[OD_rel];
							attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Bike     := toTime_Bike[int32] - Duration_Bike[int32] > 0i
																						? toTime_Bike - Duration_Bike 
																						: (toTime_Bike[int32] - Duration_Bike[int32] + (#Time / 2)[int32])[uint32];
							attribute<Time>                       toTime_Bike       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(toTime_Bike, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
					
					container Sparse_uitwerking_Org2StopT_B
					{
						unit<uint32> OD_path := RoadNets_Org2StopT_B/Network/ODMatrix;
						
						unit<uint32> AB := join_equal_values_uint32(OD_path/Complete_Stops_rel, ScheduledSpaceTimeEvents/StopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
							attribute<rdc>                        geometry (arc)    := OD_path/geometry[OD_rel];
							attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Bike     := toTime_Bike[int32] - Duration_Bike[int32] > 0i
																						? toTime_Bike - Duration_Bike 
																						: (toTime_Bike[int32] - Duration_Bike[int32] + (#Time / 2)[int32])[uint32];
							attribute<Time>                       toTime_Bike       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(toTime_Bike, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
					
					container Sparse_uitwerking_Org2StopTM_B
					{
						unit<uint32> OD_path := RoadNets_Org2StopTM_B/Network/ODMatrix;
						
						unit<uint32> AB := join_equal_values_uint32(OD_path/Complete_Stops_rel, ScheduledSpaceTimeEvents/StopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
							attribute<rdc>                        geometry (arc)    := OD_path/geometry[OD_rel];
							attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Bike     := toTime_Bike[int32] - Duration_Bike[int32] > 0i
																						? toTime_Bike - Duration_Bike 
																						: (toTime_Bike[int32] - Duration_Bike[int32] + (#Time / 2)[int32])[uint32];
							attribute<Time>                       toTime_Bike       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(toTime_Bike, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
					
					container Sparse_uitwerking_Org2StopTMT_B
					{
						unit<uint32> OD_path := RoadNets_Org2StopTMT_B/Network/ODMatrix;
						
						unit<uint32> AB := join_equal_values_uint32(OD_path/Complete_Stops_rel, ScheduledSpaceTimeEvents/StopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
							attribute<rdc>                        geometry (arc)    := OD_path/geometry[OD_rel];
							attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Bike     := toTime_Bike[int32] - Duration_Bike[int32] > 0i
																						? toTime_Bike - Duration_Bike 
																						: (toTime_Bike[int32] - Duration_Bike[int32] + (#Time / 2)[int32])[uint32];
							attribute<Time>                       toTime_Bike       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(toTime_Bike, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
					
					container Sparse_uitwerking_Org2Stop_W
					{
						unit<uint32> OD_path := RoadNets_Org2Stop_W/Network/ODMatrix;
						unit<uint32> AB := join_equal_values_uint32(OD_path/EindRef, ScheduledSpaceTimeEvents/stopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
							attribute<rdc>    		              geometry (arc)    := OD_path/geometry[OD_rel];
							
							attribute<Time>                       Duration_Walk     := OD_path/Duration[OD_rel];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Walk     := toTime_Walk[int32] - Duration_Walk[int32] > 0i
																						? toTime_Walk - Duration_Walk 
																						: (toTime_Walk[int32] - Duration_Walk[int32] + (#Time / 2)[int32])[uint32];
							attribute<Time>                       toTime_Walk       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(toTime_Walk, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
					container Sparse_uitwerking_Org2Stop_B
					{
						unit<uint32> OD_path := RoadNets_Org2Stop_B/Network/ODMatrix;
						unit<uint32> AB := join_equal_values_uint32(OD_path/EindRef, ScheduledSpaceTimeEvents/stopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Org>                        Org_rel           := OD_path/StartRef[OD_rel];
							attribute<rdc>    		              geometry (arc)        := OD_path/geometry[OD_rel];
							
							attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Bike     := toTime_Bike[int32] - Duration_Bike[int32] > 0i
																						? toTime_Bike - Duration_Bike 
																						: (toTime_Bike[int32] - Duration_Bike[int32] + (#Time / 2)[int32])[uint32];
							attribute<Time>                       toTime_Bike       := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(toTime_Bike, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
					container Sparse_uitwerking_Stop2Dest_W
					{
						unit<uint32> OD_path := RoadNets_Stop2Dest_W/Network/ODMatrix;
						unit<uint32> AB := join_equal_values_uint32(OD_path/StartRef, ScheduledSpaceTimeEvents/stopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Dest>                       Dest_rel          := OD_path/EindRef[OD_rel];
							attribute<rdc>    		              geometry (arc)    := OD_path/geometry[OD_rel];
							
							attribute<Time>                       Duration_Walk     := OD_path/Duration[OD_rel] > #Time / 2
																						? #Time / 2
																						: OD_path/Duration[OD_rel];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Walk     := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<Time>                       ToTime_Walk       := FromTime_Walk + Duration_Walk > #Time
																						? FromTime_Walk + Duration_Walk - #Time
																						: FromTime_Walk + Duration_Walk;
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(FromTime_Walk, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
					container Sparse_uitwerking_Stop2Dest_B
					{
						unit<uint32> OD_path := RoadNets_Stop2Dest_B/Network/ODMatrix;
						unit<uint32> AB := join_equal_values_uint32(OD_path/StartRef, ScheduledSpaceTimeEvents/stopRef)
						{
							attribute<Stops>                      Stop_rel          := nr_X_rel;
							attribute<OD_path>                    OD_rel            := nr_1_rel;
							attribute<ScheduledSpaceTimeEvents>   SSTE_rel          := nr_2_rel;
							
							attribute<allLinks/Places>            Place_rel         := stops/PlaceRef[Stop_rel];
							attribute<Dest>                       Dest_rel          := OD_path/EindRef[OD_rel];
							attribute<rdc>    		              geometry (arc)    := OD_path/geometry[OD_rel];
							
							attribute<Time>                       Duration_Bike     := (Distance / ModelParameters/Advanced/BikingSpeed)[Time];
							attribute<m>                          Distance          := OD_path/Distance[OD_rel];
							attribute<Time>                       FromTime_Bike     := ScheduledSpaceTimeEvents/TimeRef[SSTE_rel];
							attribute<Time>                       ToTime_Bike       := FromTime_Bike + Duration_Bike > #Time
																						? FromTime_Bike + Duration_Bike - #Time
																						: FromTime_Bike + Duration_Bike;
							attribute<string>                     LabelText         := OD_path/labeltext[OD_rel], DialogType = "LabelText";
							
							attribute<upoint>                     MomentxPlace      := point(FromTime_Bike, Place_rel, upoint);
							attribute<allLinks/NodeSet>           NodeRef           := rlookup(MomentxPlace, allLinks/NodeSet/values);
							
							unit<uint32> uq_stops := unique(Place_rel)
							{
								attribute<allLinks/Places> UsedStops := values;
							}
						}
					}
				}
			}
		}
		
		container PrivateTransport 
		{
			parameter<string> Export_Pedestrian_decayed      := Pedestrian/ExportTable_Decayed/File;
			parameter<string> Export_Pedestrian_traveltimes  := Pedestrian/ExportTable_Traveltimes/File;
			parameter<string> Export_Bike_decayed            := Bike/ExportTable_Decayed/File;
			parameter<string> Export_Bike_traveltimes        := Bike/ExportTable_Traveltimes/File;
			parameter<string> Export_Car_Decayed             := Car/ExportTable_Decayed/File;
			parameter<string> Export_Car_traveltimes         := Car/ExportTable_Traveltimes/File;
			
			container Impl
			{
				parameter<string> fileNamePrefix :=  ModelParameters/Advanced/fileNamePrefix;
				parameter<string> fileNameSuffix :=  
					'_ORG-'    + ModelParameters/Orgset + '-' + regio_name + 
					'_DEST-'   + ModelParameters/Advanced/DestSet_string +
					'_NETWERK-@@' +
					'_MaxTime-' + string(ModelParameters/MaxCarTime)+'min';
			}
			
			Container Pedestrian
			{
				// container NetwerkSpec :=
					 // templates/netwerk(
						  // org
						// , dest
						// , SourceData/Infrastructuur/OSM/Network_Pedestrian
						// , org/point
						// , dest/point
						// , SourceData/Infrastructuur/OSM/Network_Pedestrian/geometry
						// , 'pedestrian'
					// );
					
				container NetwerkSpec :=
					Templates/CreateNetwork_T(
						  org
						, dest
						, SourceData/Infrastructuur/OSM/Network_Pedestrian/IsVerbonden
						, 'Pedestrian' //Pedestrian Bike MorningRush NoonRush LateEveningRush
					);
				
				unit<uint32> LinkSet := NetwerkSpec/FinalLinkSet 
				{
					attribute<min_f> impedance_freeflow        := NetwerkSpec/FinalLinkSet/impedance_freeflow  / 60[s_f / min_f];
				}
			
				container Calc_Traveltimes_freeflow := freeflow_T(LinkSet, LinkSet/impedance_freeflow, ModelParameters/MaxPedestrianTime_Org2Dest);
				
				unit<uint64> ExportTable_Traveltimes := Calc_Traveltimes_freeflow/Traveltimes
				{
					attribute<org > Org_rel := OrgZone_rel;
					attribute<dest> Dst_rel := DstZone_rel;
					
					attribute<min_f> DefaultSpeed_imp    := Impedance;
					
					attribute<string> BodyLines :=
						dest/name[Dst_rel] + ';' +
						org/name[Org_rel] + ';' + 
						string(DefaultSpeed_imp);
					parameter<string> File := 'Org;Dst;Freeflow\n'++AsList(BodyLines, '\n'), StorageName = "=impl/fileNamePrefix+'Traveltimes'+replace(impl/fileNameSuffix, '@@', 'Pedestrian') +'.csv'", StorageType = "str";
				}
				unit<uint32> ExportTable_Decayed := org
				{
					attribute<float32> nr_items_of_interest_decayed_freeflow        := Calc_Traveltimes_freeflow/Decay/D_i;
					
					attribute<string> BodyLines (org) := org/name + ';' + string(nr_items_of_interest_decayed_freeflow);
					parameter<string> File            := 'Org;freeflow\n'++AsList(BodyLines, '\n'), StorageName = "=impl/fileNamePrefix+''+ModelParameters/items_of_interest+'_decayed'+replace(impl/fileNameSuffix, '@@', 'Pedestrian')+'.csv'", StorageType = "str";
				}
			}
			
			Container Bike
			{
				container NetwerkSpec :=
					Templates/CreateNetwork_T(
						  org
						, dest
						, SourceData/Infrastructuur/OSM/Network_Bike/IsVerbonden
						, 'Bike' //Pedestrian Bike MorningRush NoonRush LateEveningRush
					);
					
				container NetwerkSpec_ebike :=
					Templates/CreateNetwork_T(
						  org
						, dest
						, SourceData/Infrastructuur/OSM/Network_Bike/IsVerbonden
						, 'E_Bike' //Pedestrian Bike MorningRush NoonRush LateEveningRush
					);
				
				unit<uint32> LinkSet := NetwerkSpec/FinalLinkSet 
				{
					attribute<min_f> impedance_freeflow       := NetwerkSpec/FinalLinkSet/impedance_freeflow  / 60[s_f / min_f];
					attribute<min_f> impedance_congested      := NetwerkSpec/FinalLinkSet/impedance_congested   / 60[s_f / min_f];
				}
				
				unit<uint32> LinkSet_ebike := NetwerkSpec_ebike/FinalLinkSet 
				{
					attribute<min_f> impedance_freeflow       := NetwerkSpec_ebike/FinalLinkSet/impedance_freeflow  / 60[s_f / min_f];
					attribute<min_f> impedance_congested      := NetwerkSpec_ebike/FinalLinkSet/impedance_congested   / 60[s_f / min_f];
				}
			
				container Calc_Traveltimes_freeflow        := freeflow_T(LinkSet, LinkSet/impedance_freeflow,  /ModelParameters/MaxBikeTime_Org2Dest);
				container Calc_Traveltimes_freeflow_ebike  := freeflow_T(LinkSet_ebike, LinkSet_ebike/impedance_freeflow,  /ModelParameters/MaxBikeTime_Org2Dest);
				container Calc_Traveltimes_congested       := freeflow_T(LinkSet, LinkSet/impedance_congested, /ModelParameters/MaxBikeTime_Org2Dest);
				container Calc_Traveltimes_congested_ebike := freeflow_T(LinkSet_ebike, LinkSet_ebike/impedance_congested, /ModelParameters/MaxBikeTime_Org2Dest);
				
				unit<uint64> ExportTable_Traveltimes := Calc_Traveltimes_freeflow/Traveltimes
				{
					attribute<org > Org_rel := OrgZone_rel;
					attribute<dest> Dst_rel := DstZone_rel;
					
					attribute<min_f> DefaultSpeed_imp     := Impedance;
					attribute<min_f> E_Bike_imp           := rjoin(Org_Dest, Calc_Traveltimes_freeflow_ebike/Traveltimes/Org_Dest, Calc_Traveltimes_freeflow_ebike/Traveltimes/Impedance);
					attribute<min_f> ActualBike_imp       := rjoin(Org_Dest, Calc_Traveltimes_congested/Traveltimes/Org_Dest, Calc_Traveltimes_congested/Traveltimes/Impedance);
					attribute<min_f> ActualE_Bike_Adj_imp := rjoin(Org_Dest, Calc_Traveltimes_congested_ebike/Traveltimes/Org_Dest, Calc_Traveltimes_congested_ebike/Traveltimes/Impedance);

					attribute<bool>  IsCorrect_ActualBike     := ActualBike_imp >= DefaultSpeed_imp;
					
					attribute<string> BodyLines_ActualBike :=
						dest/name[Dst_rel] + ';' +
						org/name[Org_rel] + ';' + 
						string(DefaultSpeed_imp) + ';' +
						string(E_Bike_imp) + ';' +
						string(ActualBike_imp) + ';' +
						string(ActualE_Bike_Adj_imp);
					parameter<string> File_ActualBike := 'Org;Dst;Freeflow;Freeflow_ebike;ActualBike;ActualE_Bike_Adj\n'++AsList(BodyLines_ActualBike, '\n'), StorageName = "=impl/fileNamePrefix+'Traveltimes'+replace(impl/fileNameSuffix, '@@', 'Bike') +'.csv'", StorageType = "str";
					
					attribute<string> BodyLines_Freeflow :=
						dest/name[Dst_rel] + ';' +
						org/name[Org_rel] + ';' + 
						string(DefaultSpeed_imp) + ';' + 
						string(E_Bike_imp);
					parameter<string> File_Freeflow := 'Org;Dst;Freeflow;Freeflow_ebike\n'++AsList(BodyLines_Freeflow, '\n'), StorageName = "=impl/fileNamePrefix+'Traveltimes'+replace(impl/fileNameSuffix, '@@', 'Bike') +'.csv'", StorageType = "str";
					
					parameter<string> File := =ModelParameters/UseActualBikeSpeeds ? 'File_ActualBike' : 'File_Freeflow';
				}
				
				unit<uint32> ExportTable_Decayed := org
				{
					attribute<float32> nr_items_of_interest_decayed_MaxSpeed         := Calc_Traveltimes_freeflow/Decay/D_i;
					attribute<float32> nr_items_of_interest_decayed_Ebike            := Calc_Traveltimes_freeflow_ebike/Decay/D_i;
					attribute<float32> nr_items_of_interest_decayed_ActualBike       := Calc_Traveltimes_congested/Decay/D_i;
					attribute<float32> nr_items_of_interest_decayed_ActualE_Bike_adj := Calc_Traveltimes_congested_ebike/Decay/D_i;
					attribute<float32> Loss_ActualBike                               := nr_items_of_interest_decayed_MaxSpeed - nr_items_of_interest_decayed_ActualBike;
					
					attribute<string> BodyLines (org) := org/name + ';' + string(nr_items_of_interest_decayed_MaxSpeed) + ';'+string(nr_items_of_interest_decayed_Ebike) + ';'+string(nr_items_of_interest_decayed_ActualBike) + ';'+string(nr_items_of_interest_decayed_ActualE_Bike_adj);
					parameter<string> File            := 'Org;freeflow;freeflow_ebike;ActualBike;ActualE_Bike_Adj\n'++AsList(BodyLines, '\n'), StorageName = "=impl/fileNamePrefix+''+ModelParameters/items_of_interest+'_decayed'+replace(impl/fileNameSuffix, '@@', 'Bike')+'.csv'", StorageType = "str";
				}
			}
			
			container Car := Templates/PrivateTransport_Car_T(org, dest, true, 'MorningRush');
			
			Template freeflow_T
			{
				unit<uint32>     LinkSet;
				attribute<min_f> impedance_min   (LinkSet);
				parameter<min_f> MaxTraveltime_min;
				///
				
				unit<uint64> Traveltimes :=
					impedance_matrix_od64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
						, impedance_min
						, LinkSet/F1
						, LinkSet/F2
						, LinkSet/OrgNode_rel
						, LinkSet/DestNode_rel
						, MaxTraveltime_min //cut impedance
					)
				{
					attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
					
					unit<uint64> uq_dest := unique(dstZone_rel);
				}
				
				unit<uint64> Decay := 
					impedance_matrix_od64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i'
						, impedance_min
						, LinkSet/F1
						, LinkSet/F2
						, LinkSet/OrgNode_rel
						, LinkSet/DestNode_rel
						, MaxTraveltime_min 
						, 1f                                 // v_i
						, dest/nr_items_of_interest[float32]        // w_j
						, ModelParameters/Advanced/Distance_Decay/car_a , ModelParameters/Advanced/Distance_Decay/car_b , ModelParameters/Advanced/Distance_Decay/car_c
					);
			}
		}
		
		#include<PublicTransport.dms>
	}
}
