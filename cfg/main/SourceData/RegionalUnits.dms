container RegionalUnits : using = "geometries"
{ 	
	parameter<string> Regio_jaar          := ModelParameters/RegioIndelingen_jaar;
	parameter<bool>   IsGeneraliseerd     := rjoin(Regio_jaar, Gebiedsindelingen_jaren/name, Gebiedsindelingen_jaren/IsGeneraliseerd);
	parameter<string> gegeneraliseerd_str := IsGeneraliseerd ? '_gegeneraliseerd' : '_niet_gegeneraliseerd';
	
	unit<uint32> Gebiedsindelingen_jaren := range(uint32, 2021, 2024)
	{
		attribute<uint32> jaar            := id(.);
		attribute<string> name            := 'Y'+string(jaar);
		attribute<bool>   IsGeneraliseerd := jaar >= 2019;
	}
	container Gebiedsindelingen :=
		for_each_ne(
			Gebiedsindelingen_jaren/name
			, 'Read_Gebiedsindelingen_gpkg_T('+quote(string(Gebiedsindelingen_jaren/jaar))+')'
		);

	Template Read_Gebiedsindelingen_gpkg_T
	{
		parameter<string> jaar;
		//
		container gpkg
		:	StorageName     = "='%SourceDataDir%/CBS/cbsgebiedsindelingen'+jaar+'.gpkg'"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		,	DialogData      = "rdc"
		,	URL             = "https://www.cbs.nl/nl-nl/dossier/nederland-regionaal/geografische-data/cbs-gebiedsindelingen";
	}
	
	
	unit<uint32>  Buurt := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/buurt'+gegeneraliseerd_str
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/buurt'+gegeneraliseerd_str+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/buurt'+gegeneraliseerd_str+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/buurt'+gegeneraliseerd_str+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          address_weighted_centroid    := SourceData/BAG/Adressen/Woon_Voorraad/Buurt/centroid;
		attribute<rdc>          population_weighted_centroid := CalcPopCentroids/geometry;
		attribute<rdc>          centroid                     := =ModelParameters/CentroidWeightType == 'Population' ? 'population_weighted_centroid' : 'address_weighted_centroid';
		attribute<centroiden>   centroiden_rel               := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> CalcPopCentroids := .
		{
			attribute<float32> W                   := sum(Population/pop, Population/regio_rel);
			
			attribute<float32> Weighted_X          := sum(Population/x * Population/pop, Population/regio_rel);
			attribute<float32> Weighted_Y          := sum(Population/y * Population/pop, Population/regio_rel);
			
			attribute<float32> mean_X              := Weighted_X / W;
			attribute<float32> mean_Y              := Weighted_y / W;
			 
			attribute<rdc>     weighted_centroid0  := point(mean_X, mean_Y, rdc);
			
			//controles
			attribute<.>        poly_rel           := point_in_polygon(weighted_centroid0, ../geometry);
			attribute<string>   statcode_poly      := ./statcode;
			attribute<string>   statcode_centr     := statcode_poly[Poly_rel];
			attribute<bool>     IsStatcode_gelijk  := statcode_poly == statcode_centr;
			attribute<rdc>      centroid_or_mid    := centroid_or_mid(../geometry);
			attribute<rdc>      weighted_centroid  := IsStatcode_gelijk ? weighted_centroid0 : centroid_or_mid;
			
			
			attribute<rdc>      geometry           := weighted_centroid;
			
			unit<uint32> Population := SourceData/Locaties/Inwoners
			{
				attribute<...>     regio_rel := point_in_polygon(centroid, .../geometry);
				attribute<float32> x         := pointcol(centroid);
				attribute<float32> y         := pointrow(centroid);
				attribute<float32> pop       := nr_inwoners[float32];
				
			}
		}
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
			container V := for_each_nedv(AsItemName(label), 'value('+string(id(.))+', ..)', void, .);
		}
		
		unit<uint32> Enkele_Buurt := ='select_with_attr_by_cond(centroiden, id(centroiden) == centroiden/v/'+ModelParameters/Orgset_EnkeleBuurt_selectie+')';
		unit<uint32> Enkele_Prov  := ='select_with_attr_by_cond(centroiden, centroiden/prov_rel == Provincie/V/'+ModelParameters/Orgset_EnkeleProv_selectie+')';
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Wijk := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/wijk'+gegeneraliseerd_str+'' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/wijk'+gegeneraliseerd_str+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/wijk'+gegeneraliseerd_str+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/wijk'+gegeneraliseerd_str+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		// attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		// attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		// attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          address_weighted_centroid    := SourceData/BAG/Adressen/Woon_Voorraad/wijk/centroid;
		// attribute<rdc>          population_weighted_centroid := CalcPopCentroids/geometry;
		attribute<rdc>          centroid                     := =ModelParameters/CentroidWeightType == 'Population' ? 'population_weighted_centroid' : 'address_weighted_centroid';
		attribute<centroiden>   centroiden_rel               := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> CalcPopCentroids := .
		{
			attribute<float32> W          := sum(Population/pop, Population/regio_rel);
			
			attribute<float32> Weighted_X := sum(Population/x * Population/pop, Population/regio_rel);
			attribute<float32> Weighted_Y := sum(Population/y * Population/pop, Population/regio_rel);
			
			attribute<float32> mean_X     := Weighted_X / W;
			attribute<float32> mean_Y     := Weighted_y / W;
			 
			attribute<rdc>  weighted_centroid0            := point(mean_X, mean_Y, rdc);
			attribute<bool> IsWeighted_centroid_in_regio  := IsDefined(point_in_polygon(weighted_centroid0, ../geometry));
			attribute<rdc>  weighted_centroid             := IsWeighted_centroid_in_regio ? weighted_centroid0 : centroid_or_mid(../geometry);
			attribute<rdc>  geometry                      := weighted_centroid;
			
			unit<uint32> Population := SourceData/Locaties/Inwoners
			{
				attribute<...>     regio_rel := point_in_polygon(centroid, .../geometry);
				attribute<float32> x         := pointcol(centroid);
				attribute<float32> y         := pointrow(centroid);
				attribute<float32> pop       := nr_inwoners[float32];
				
			}
		}
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
			container V := for_each_nedv(AsItemName(label), 'value('+string(id(.))+', ..)', void, .);
		}
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Gemeente := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/gemeente'+gegeneraliseerd_str+'' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/gemeente'+gegeneraliseerd_str+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/gemeente'+gegeneraliseerd_str+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/gemeente'+gegeneraliseerd_str+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		// attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		// attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          address_weighted_centroid    := SourceData/BAG/Adressen/Woon_Voorraad/gemeente/centroid;
		// attribute<rdc>          population_weighted_centroid := CalcPopCentroids/geometry;
		attribute<rdc>          centroid                     := =ModelParameters/CentroidWeightType == 'Population' ? 'population_weighted_centroid' : 'address_weighted_centroid';
		attribute<centroiden>   centroiden_rel               := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> CalcPopCentroids := .
		{
			attribute<float32> W          := sum(Population/pop, Population/regio_rel);
			
			attribute<float32> Weighted_X := sum(Population/x * Population/pop, Population/regio_rel);
			attribute<float32> Weighted_Y := sum(Population/y * Population/pop, Population/regio_rel);
			
			attribute<float32> mean_X     := Weighted_X / W;
			attribute<float32> mean_Y     := Weighted_y / W;
			 
			attribute<rdc>  weighted_centroid0            := point(mean_X, mean_Y, rdc);
			attribute<bool> IsWeighted_centroid_in_regio  := IsDefined(point_in_polygon(weighted_centroid0, ../geometry));
			attribute<rdc>  weighted_centroid             := IsWeighted_centroid_in_regio ? weighted_centroid0 : centroid_or_mid(../geometry);
			attribute<rdc>  geometry                      := weighted_centroid;
			
			unit<uint32> Population := SourceData/Locaties/Inwoners
			{
				attribute<...>     regio_rel := point_in_polygon(centroid, .../geometry);
				attribute<float32> x         := pointcol(centroid);
				attribute<float32> y         := pointrow(centroid);
				attribute<float32> pop       := nr_inwoners[float32];
				
			}
		}
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
			container V := for_each_nedv(AsItemName(label), 'value('+string(id(.))+', ..)', void, .);
		}
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Corop := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/coropgebied_gegeneraliseerd' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/coropgebied_gegeneraliseerd/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/coropgebied_gegeneraliseerd/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/coropgebied_gegeneraliseerd/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint32>  Provincie := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/provincie_gegeneraliseerd' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/provincie_gegeneraliseerd/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/provincie_gegeneraliseerd/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/provincie_gegeneraliseerd/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint32> NL := range(uint32, 0, 1) 
	{
		attribute<geometries/rdc_mm> geometry_mm              (poly) := partitioned_union_polygon(Corop/geometry[rdc_mm], const(0[.],Corop));
		attribute<geometries/rdc>    geometry                 (poly) := geometry_mm[rdc];
		attribute<string>            name                            : [ 'All' ];
		attribute<ipoint>            Nederland_10kbuffer_int  (poly) := polygon_i4D_d4D(geometry[ipoint], 20000d, 10000d);
		attribute<geometries/rdc>    Nederland_10kbuffer      (poly) := Nederland_10kbuffer_int[geometries/rdc];
	}
	
	unit<uint32> PC4 := /SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids;
	unit<uint32> PC6 := /SourceData/BAG/Adressen/Woon_Voorraad/PC6_centroids;
	
	unit<uint32> Buitenland : nrofrows = 1
	{
		attribute<string>         name            := const('Buitenland',.);
	}

	Template Per_Prov_T
	{
		parameter<uint32> prov_id;
		unit<uint32> domain;
		//
		unit<uint32> sub := ='select_with_org_rel(domain/prov_rel == '+string(prov_id)+')'
		{
			attribute<rdc>    geometry    := domain/geometry[org_rel];
			attribute<string> name        := domain/name[org_rel];
			attribute<string> label       := domain/label[org_rel];
			attribute<uint32> nr_banen    := domain/nr_banen[org_rel];
			attribute<uint32> nr_inwoners := domain/nr_inwoners[org_rel];
		}
	}
	Template Per_COROP_T
	{
		parameter<uint32> COROP_id;
		unit<uint32> domain;
		//
		unit<uint32> sub := ='select_with_org_rel(domain/corop_rel == '+string(COROP_id)+')'
		{
			attribute<rdc>    geometry    := domain/geometry[org_rel];
			attribute<string> name        := domain/name[org_rel];
			attribute<string> label       := domain/label[org_rel];
			attribute<uint32> nr_banen    := domain/nr_banen[org_rel];
			attribute<uint32> nr_inwoners := domain/nr_inwoners[org_rel];
		}
	}



}
