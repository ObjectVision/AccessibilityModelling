container RegioIndelingen : using = "geometries"
{ 
	parameter<string> Regio_jaar := ModelParameters/RegioIndelingen_jaar;

	unit<uint32> Gebiedsindelingen_jaren := range(uint32, 2019, 2023)
	{
		attribute<uint32> jaar := id(.);
		attribute<string> name := 'Y'+string(jaar);
	}
	container Gebiedsindelingen :=
		for_each_ne(
			Gebiedsindelingen_jaren/name
			, 'Read_Gebiedsindelingen_gpkg_T('+quote(string(Gebiedsindelingen_jaren/jaar))+')'
		);

	Template Read_Gebiedsindelingen_gpkg_T
	{
		parameter<string> jaar;
		//
		container gpkg
		:	StorageName     = "='%NetworkModel_dir%/RegioIndelingen/cbsgebiedsindelingen'+jaar+'.gpkg'"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		,	DialogData      = "rdc";
	}
	
	
	unit<uint32>  Buurt := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_buurt_'+Regio_jaar+'_gegeneraliseerd' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_buurt_'+Regio_jaar+'_gegeneraliseerd/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_buurt_'+Regio_jaar+'_gegeneraliseerd/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_buurt_'+Regio_jaar+'_gegeneraliseerd/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          centroid             := SourceData/BAG/Adres/buurt/geometry;
		attribute<centroiden>   centroiden_rel       := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> CalcPopCentroids := .
		{
			attribute<float32> W          := sum(Population/pop, Population/regio_rel);
			
			attribute<float32> Weighted_X := sum(Population/x * Population/pop, Population/regio_rel);
			attribute<float32> Weighted_Y := sum(Population/y * Population/pop, Population/regio_rel);
			
			attribute<float32> mean_X     := Weighted_X / W;
			attribute<float32> mean_Y     := Weighted_y / W;
			 
			attribute<rdc>  weighted_centroid0            := point(mean_X, mean_Y, rdc);
			attribute<bool> IsWeighted_centroid_in_regio  := IsDefined(point_in_polygon(weighted_centroid0, ../geometry));
			attribute<rdc>  weighted_centroid             := IsWeighted_centroid_in_regio ? weighted_centroid0 : centroid_or_mid(../geometry);
			attribute<rdc>  geometry                      := weighted_centroid;
			
			unit<uint32> Population := SourceData/Locaties/Inwoners
			{
				attribute<...>     regio_rel := point_in_polygon(centroid, .../geometry);
				attribute<float32> x         := pointcol(centroid);
				attribute<float32> y         := pointrow(centroid);
				attribute<float32> pop       := nr_inwoners[float32];
				
			}
		}
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
			container V := for_each_nedv(AsItemName(label), 'value('+string(id(.))+', ..)', void, .);
		}
		
		unit<uint32> Enkele_Buurt := ='select_with_attr_by_cond(centroiden, id(centroiden) == centroiden/v/'+ModelParameters_test/Orgset_EnkeleBuurt_selectie+')';
		unit<uint32> Enkele_Prov  := ='select_with_attr_by_cond(centroiden, centroiden/prov_rel == Provincie/V/'+ModelParameters_test/Orgset_EnkeleProv_selectie+')';
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Wijk := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_wijk_'+Regio_jaar+'_gegeneraliseerd' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_wijk_'+Regio_jaar+'_gegeneraliseerd/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_wijk_'+Regio_jaar+'_gegeneraliseerd/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_wijk_'+Regio_jaar+'_gegeneraliseerd/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          centroid             := SourceData/BAG/Adres/wijk/geometry;
		attribute<centroiden>   centroiden_rel       := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
		}
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Gemeente := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_gemeente_'+Regio_jaar+'_gegeneraliseerd' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_gemeente_'+Regio_jaar+'_gegeneraliseerd/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_gemeente_'+Regio_jaar+'_gegeneraliseerd/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_gemeente_'+Regio_jaar+'_gegeneraliseerd/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          centroid             := SourceData/BAG/Adres/gemeente/geometry;
		attribute<centroiden>   centroiden_rel       := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
		}
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Corop := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_coropgebied_'+Regio_jaar+'_gegeneraliseerd' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_coropgebied_'+Regio_jaar+'_gegeneraliseerd/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_coropgebied_'+Regio_jaar+'_gegeneraliseerd/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_coropgebied_'+Regio_jaar+'_gegeneraliseerd/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint32>  Provincie := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_provincie_'+Regio_jaar+'_gegeneraliseerd' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_provincie_'+Regio_jaar+'_gegeneraliseerd/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_provincie_'+Regio_jaar+'_gegeneraliseerd/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/cbs_provincie_'+Regio_jaar+'_gegeneraliseerd/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint32> NL := range(uint32, 0, 1) 
	{
		attribute<geometries/rdc_mm> geometry_mm              (poly) := partitioned_union_polygon(Corop/geometry[rdc_mm], const(0[.],Corop));
		attribute<geometries/rdc>    geometry                 (poly) := geometry_mm[rdc];
		attribute<string>            name                            : [ 'All' ];
		attribute<ipoint>            Nederland_10kbuffer_int  (poly) := polygon_i4D_d4D(geometry[ipoint], 20000d, 10000d);
		attribute<geometries/rdc>    Nederland_10kbuffer      (poly) := Nederland_10kbuffer_int[geometries/rdc];
	}
	
	unit<uint32> Buitenland : nrofrows = 1
	{
		attribute<string>         name            := const('Buitenland',.);
	}
	
	unit<uint32> Provincies_metBuitenland := union_unit(Provincie, Buitenland)
	{
		attribute<string>         name           := union_data(., Provincie/name, Buitenland/name);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> LMS_gm4_2022
	:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/LMS_gm4_2022_polygons.shp"
	,	StorageType     = "gdal.vect"
	,		StorageReadOnly = "True"
	{
		attribute<geometries/rdc>       geometry  (poly);
		attribute<uint32>               ZONE_ID;
		attribute<uint32>               NL;
	}

	unit<uint32> LMS_gm4_2022_centroiden
	:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/LMS_gm4_2022_pop_gew_centroiden_NL.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	{
		attribute<geometries/rdc>       geometry;
		attribute<geometries/rdc>       point     := geometry;
		attribute<uint32>               ZONE_ID;
		attribute<uint32>               NL;
		attribute<uint32>               xcoord;
		attribute<uint32>               ycoord;
		attribute<string>               name         := ''+string(ZONE_ID);
		attribute<string>               label        := name;
		
	}
	
	unit<uint32> PC6pnt2020 
	:	StorageName     = "%SourceDataDir%/NetworkModel/Voorzieningen/PC6_punten/pc6_xy_tm2020.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	{
		attribute<rdc>                   geometry;
		attribute<rdc>                   point               := geometry;
		attribute<string>                name                := postcode6;
		attribute<string>                label               := name;
		attribute<uint32>                nr_pc6_2020         := const(1,.);
		attribute<RegioUnit_Buurt>       buurt_rel           := point_in_polygon(geometry, RegioUnit_Buurt/Geometry);
		attribute<string>                buurtcode           := RegioUnit_Buurt/statcode[buurt_rel];
		attribute<string>                buurtnaam           := RegioUnit_Buurt/statnaam[buurt_rel];
	}	
	
	container PC5_avg_xy_wpft
	{
		unit<uint32> obv_LISA_2022
		:	StorageName     = "%SourceDataDir%/NetworkModel/Voorzieningen/PC5_punten/LISA2022_2012_2022_pc5_avg_xy.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			unit<uint32> PC5pnt_2022_2012
			{
				attribute<geometries/rdc>       geometry;
				attribute<geometries/rdc>       point                 := geometry;
				attribute<string>               Name                  := pc5;
				attribute<string>               label                 := pc5;
				attribute<uint32>               Nr_pc5                := const(1,.);
				attribute<uint32>               Nr_items_of_interest  := Nr_pc5;
				attribute<RegioUnit_Buurt>      buurt_rel             := point_in_polygon(geometry, RegioUnit_Buurt/Geometry);
				attribute<string>               buurtcode             := RegioUnit_Buurt/BU_CODE[buurt_rel];
				attribute<string>               buurtnaam             := RegioUnit_Buurt/BU_NAAM[buurt_rel];		
			}
		}		
	}
	
	container LMS
	{
		unit<uint32> y2022
		:	StorageName     = "%SourceDataDir%/NetworkModel/Voorzieningen/LMS_zones/LMS_2022gm4_pgewcentr_NL.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			unit<uint32> LMS_gm4_2022_centroiden_NL
			{
				attribute<geometries/rdc>       geometry;
				attribute<geometries/rdc>       point                := geometry;
				attribute<string>               Name                 := string(ZONE_ID);
				attribute<string>               label                := Name;
				attribute<uint32>               Nr_lms               := const(1,.);
				attribute<uint32>               Nr_items_of_interest := Nr_lms;
				attribute<RegioUnit_Buurt>      buurt_rel            := point_in_polygon(geometry, RegioUnit_Buurt/Geometry);
				attribute<string>               buurtcode            := RegioUnit_Buurt/BU_CODE[buurt_rel];
				attribute<string>               buurtnaam            := RegioUnit_Buurt/BU_NAAM[buurt_rel];
			}
		}
	}
	container Buurt_centroiden
	{
		unit<uint32> y2022_centroiden
		:	StorageName     = "%ProjDir%/UnlinkedData/RegioIndelingen/buurt_centroiden_2022.fss"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			
			attribute<string>           BU_CODE;
			attribute<string>           BU_NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;

			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, Buurt/stat_CODE, Buurt/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, Buurt/stat_CODE, Buurt/nr_banen);
			
			attribute<Provincie>       prov_rel         := point_in_polygon(point, Provincie/geometry);
			attribute<Corop>            corop_rel        := point_in_polygon(point, Corop/geometry);
			
			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
				
		}

		unit<uint32> y2021_centroiden
		:	StorageName     = "%ProjDir%/UnlinkedData/RegioIndelingen/buurt_centroiden_2021.fss"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			attribute<string>           BU_CODE;
			attribute<string>           BU_NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;
			
			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, y2021/BU_CODE, y2021/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, y2021/BU_CODE, y2021/nr_banen);
			
			attribute<provincie>       prov_rel         := point_in_polygon(point, provincie/geometry);
			attribute<Corop>            corop_rel        := point_in_polygon(point, Corop/geometry);
			
			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
		}

		unit<uint32> y2020_centroiden
		:	StorageName     = "%ProjDir%/UnlinkedData/RegioIndelingen/buurt_centroiden_2020.fss"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			attribute<string>           BU_CODE;
			attribute<string>           BU_NAAM;
			attribute<uint32> 			identificatie       := id(.);
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;
			
			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, y2020/BU_CODE, y2020/nr_Inwoners);
			attribute<uint32>           Nr_items_of_interest  := nr_Inwoners;
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, y2020/BU_CODE, y2020/nr_banen);
			
			attribute<provincie>                prov_rel         := point_in_polygon(point, provincie/geometry);
			attribute<Corop>                corop_rel        := point_in_polygon(point, Corop/geometry);
			
			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
		}
		
		unit<uint32> y2017_centroiden
		:	StorageName     = "%ProjDir%/UnlinkedData/RegioIndelingen/buurt_centroiden_2017.fss"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			attribute<string>           BU_CODE;
			attribute<string>           BU_NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;
			
			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, y2017/BU_CODE, y2017/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, y2017/BU_CODE, y2017/nr_banen);
			
			attribute<.>                prov_rel         := point_in_polygon(point, provincie/geometry);
			attribute<.>                corop_rel        := point_in_polygon(point, Corop/geometry);

			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
		}
	}
	Template Per_Prov_T
	{
		parameter<uint32> prov_id;
		unit<uint32> domain;
		//
		unit<uint32> sub := ='select_with_org_rel(domain/prov_rel == '+string(prov_id)+')'
		{
			attribute<rdc>    geometry    := domain/geometry[org_rel];
			attribute<string> name        := domain/name[org_rel];
			attribute<string> label       := domain/label[org_rel];
			attribute<uint32> nr_banen    := domain/nr_banen[org_rel];
			attribute<uint32> nr_inwoners := domain/nr_inwoners[org_rel];
		}
	}
	Template Per_COROP_T
	{
		parameter<uint32> COROP_id;
		unit<uint32> domain;
		//
		unit<uint32> sub := ='select_with_org_rel(domain/corop_rel == '+string(COROP_id)+')'
		{
			attribute<rdc>    geometry    := domain/geometry[org_rel];
			attribute<string> name        := domain/name[org_rel];
			attribute<string> label       := domain/label[org_rel];
			attribute<uint32> nr_banen    := domain/nr_banen[org_rel];
			attribute<uint32> nr_inwoners := domain/nr_inwoners[org_rel];
		}
	}
}
