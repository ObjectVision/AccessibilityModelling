// container NetworkPreperation
// {  
	// unit<uint32> road := Roads;
	
	// unit<uint32> road_segments  := arc2segm(road/geometry)
	// {
		// attribute<km_hr>                         kph         := road/kph[Sequence_rel];
		// attribute<classifications/OSM/roadtype>  roadtype_rel          := road/roadtype_rel[Sequence_rel];
		
		// unit<uint32> pointset  := union_unit(., .)
		// {
			// attribute<rdc>                 point    := Union_Data(., ../point, ../nextpoint);
			// attribute<..>                  ArcID    := value(ID(.) % nrofrows(..), ..); 
			// attribute<uint32>              VolgNr   := ID(.) / nrofrows(..);
			// attribute<bool>                isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
		// }
		// attribute<rdc> geometry (arc)  := points2sequence(pointset/point, pointset/ArcID, pointset/VolgNr);
	
		// attribute<rdc>               point            := first_point(geometry);
		// attribute<rdc>               nextpoint        := last_point(geometry);

		// attribute<bool> isVerbonden := all(pointset/isVerbonden, pointset/ArcID);

		// unit<uint32> NodeSet := unique(pointset/point)
		// ,	DialogData = "Values"
		// ,	DialogType = "Map"
		// {
			// attribute<rdc> values;
		// }

		// attribute<NodeSet> F1 := rlookup(point,     NodeSet/Values);
		// attribute<NodeSet> F2 := rlookup(nextpoint, NodeSet/Values);
	
		// unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		// {
			// attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), part_rel);
			// parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
			// parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
		// }

		// unit<uint32> NodesNotConnected := select_with_org_rel(networks/part_rel <> networks/main)
		// {
			// attribute<rdc> point := NodeSet/Values[org_rel];
		// }
		
		// unit<uint32> ConnectedNetwork := select_with_org_rel(isVerbonden) // het resulterende verbonden wegennetwerk
		// {
			// attribute<rdc>                           geometry (arc)          := ../geometry[org_rel];
			// attribute<km_hr>                         kph                     := ../kph[org_rel];
			// attribute<classifications/OSM/roadtype>  roadtype_rel            := ../roadtype_rel[org_rel];
		// }
		// unit<uint32> Final_Network := unique(ConnectedNetwork/geometry)
		// {
			// attribute<ConnectedNetwork>              ConnectedNetwork_rel    := rlookup(geometry, ConnectedNetwork/geometry);
			// attribute<rdc>                           geometry          (arc) := values;
			// attribute<km_hr>                         kph                     := ConnectedNetwork/kph[ConnectedNetwork_rel];
			// attribute<classifications/OSM/roadtype>  roadtype_rel            := ConnectedNetwork/roadtype_rel[ConnectedNetwork_rel];
		// }
	// }
// }


container NetworkPreperation
{  
	unit<uint32> road := Roads;
	
	container preperation
	{
		unit<uint32> road_segments  := arc2segm(road/geometry)
		{
			// attribute<string>                       key              := String(pointRow(point)) + '_' + String(pointCol(point)) + '_' + String(pointRow(nextpoint)) + '_'+ String(pointCol(nextpoint));
			attribute<classifications/OSM/roadtype> roadtype_rel     := road/roadtype_rel[Sequence_rel];
			attribute<km_hr>                        kph              := road/kph[Sequence_rel];
			attribute<bool>                         IsOneDirection   := road/IsOneDirection[Sequence_rel];
			// attribute<string>                       OSM_id           := road/OSM_id[Sequence_rel];
			
			unit<uint32> pointset  := union_unit(., .)
			{
				attribute<geometries/rdc>      point    := Union_Data(., ../point, ../nextpoint);
				attribute<..>                        ArcID    := value(ID(.) % nrofrows(..), ..);
				attribute<uint32>                    VolgNr   := ID(.) / nrofrows(..);
			}
			attribute<geometries/rdc> geometry (arc)  := points2sequence(pointset/point, pointset/ArcID, pointset/VolgNr);
		}
		
		#include <ExtraVerbindingen.dms>
		
		unit<uint32> road_segments_with_extra_nodes := connect(road_segments/geometry, ExtraVerbindingen/nodes/geometry)
		{
			attribute<geometries/rdc>               UnionData (arc);
			attribute<classifications/OSM/roadtype> roadtype_rel    := MakeDefined(road_segments/roadtype_rel[arc_rel], /Classifications/OSM/roadtype/V/connectlink);
			attribute<km_hr>                        kph             := MakeDefined(road_segments/kph[arc_rel], ModelParameters/Advanced/CarDefaultSpeed);
			attribute<bool>                         IsOneDirection  := MakeDefined(road_segments/IsOneDirection[arc_rel], FALSE);
			// attribute<string>                       OSM_id           := road_segments/OSM_id[nr_OrgEntity];
		}
	}
	
	unit<uint32> Network_with_extraverbindingen  := ='union_unit(preperation/road_segments_with_extra_nodes, preperation/ExtraVerbindingen/link)'
	{
		attribute<geometries/rdc>               geometry (arc)   := union_data(., preperation/road_segments_with_extra_nodes/uniondata, preperation/ExtraVerbindingen/link/geometry);
		attribute<classifications/OSM/roadtype> roadtype_rel     := union_data(., preperation/road_segments_with_extra_nodes/roadtype_rel,   preperation/ExtraVerbindingen/link/roadtype_rel);
		attribute<km_hr>                        kph              := union_data(., preperation/road_segments_with_extra_nodes/kph,  preperation/ExtraVerbindingen/link/kph);
		attribute<bool>                         IsOneDirection   := union_data(., preperation/road_segments_with_extra_nodes/IsOneDirection,  const(FALSE, preperation/ExtraVerbindingen/link));
		// attribute<string>                       OSM_id           := union_data(., preperation/road_segments_with_extra_nodes/OSM_id,  const('',preperation/ExtraVerbindingen/link));
		attribute<geometries/rdc>               point            := first_point(geometry);
		attribute<geometries/rdc>               nextpoint        := last_point(geometry);

		unit<uint32> pointset : = union_unit(., .)
		{
			attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
			attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
			attribute<..>                   ArcNr       := value(ID(.) % #(..), ..);
		}

		attribute<bool> isVerbonden := all(pointset/isVerbonden, pointset/ArcNr);

		unit<uint32> NodeSet := unique(pointset/point)
		,	DialogData = "Values"
		,	DialogType = "Map"
		{
			attribute<geometries/rdc> values;
		}

		attribute<NodeSet> F1 := rlookup(point,     NodeSet/Values);
		attribute<NodeSet> F2 := rlookup(nextpoint, NodeSet/Values);
	
		unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), part_rel);
			parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
			parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
		}

		unit<uint32> NodesNotConnected := Subset(networks/part_rel <> networks/main)
		{
			attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
		}
		
		unit<uint32> ConnectedNetwork := select_with_attr_by_cond(., isVerbonden); // het resulterende verbonden wegennetwerk
		unit<uint32> Make_Final_Network := unique(ConnectedNetwork/geometry)
		{
			attribute<ConnectedNetwork>             ConnectedNetwork_rel    := rlookup(geometry, ConnectedNetwork/geometry);
			attribute<rdc>                          geometry (arc)          := values;
			attribute<classifications/OSM/roadtype> roadtype_rel            := ConnectedNetwork/roadtype_rel[ConnectedNetwork_rel];
			attribute<km_hr>                        kph                     := ConnectedNetwork/kph[ConnectedNetwork_rel];
			attribute<bool>                         IsOneDirection          := ConnectedNetwork/IsOneDirection[ConnectedNetwork_rel];
			// attribute<string>                       OSM_id                  := ConnectedNetwork/OSM_id[ConnectedNetwork_rel];
		}
	}
}
