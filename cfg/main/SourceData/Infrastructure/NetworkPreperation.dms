container NetworkPreperation
{  
	unit<uint32> road := Roads;
	
	unit<uint32> road_segments  := arc2segm(road/geometry)
	{
		// attribute<string>                       key              := String(pointRow(point)) + '_' + String(pointCol(point)) + '_' + String(pointRow(nextpoint)) + '_'+ String(pointCol(nextpoint));
		attribute<km_hr>                        kph         := road/kph[Sequence_rel];
		
		unit<uint32> pointset  := union_unit(., .)
		{
			attribute<rdc>                 point    := Union_Data(., ../point, ../nextpoint);
			attribute<..>                  ArcID    := value(ID(.) % nrofrows(..), ..); 
			attribute<uint32>              VolgNr   := ID(.) / nrofrows(..);
			attribute<bool>                isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
		}
		attribute<rdc> geometry (arc)  := points2sequence(pointset/point, pointset/ArcID, pointset/VolgNr);
	
		attribute<rdc>               point            := first_point(geometry);
		attribute<rdc>               nextpoint        := last_point(geometry);

		attribute<bool> isVerbonden := all(pointset/isVerbonden, pointset/ArcID);

		unit<uint32> NodeSet := unique(pointset/point)
		,	DialogData = "Values"
		,	DialogType = "Map"
		{
			attribute<rdc> values;
		}

		attribute<NodeSet> F1 := rlookup(point,     NodeSet/Values);
		attribute<NodeSet> F2 := rlookup(nextpoint, NodeSet/Values);
	
		unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
			parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
			parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
		}

		unit<uint32> NodesNotConnected := select_with_org_rel(networks/partnr <> networks/main)
		{
			attribute<rdc> point := NodeSet/Values[org_rel];
		}
		
		unit<uint32> Complete_verbonden := select_with_org_rel(isVerbonden) // het resulterende verbonden wegennetwerk
		{
			attribute<rdc>               geometry (arc)       := ../geometry[org_rel];
			attribute<km_hr>             kph                  := ../kph[org_rel];
		}
		unit<uint32> Final_Network := unique(Complete_verbonden/geometry)
		{
			attribute<rdc>               geometry (arc):= values;
			attribute<km_hr>             kph           := rjoin(values, Complete_verbonden/geometry, Complete_verbonden/kph);
		}
	}
}
